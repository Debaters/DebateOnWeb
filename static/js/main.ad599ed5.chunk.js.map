{"version":3,"sources":["Home/ModalCreateRoom.js","Home.js","Debate_Room/SingleReply.js","Debate_Room/BrowserCheck.js","Debate_Room/Debate_Subject.js","Debate_Room/Debate_title.js","Debate_Room/Debate_Room_func.js","Debate_Room/Debate_Room.js","App.js","index.js"],"names":["ModalCreateRoom","isOpen","onCloseEvent","getData","setModalIsOpen","useState","title","description","data","setData","handleValue","e","target","name","value","onClickCreateRoom","a","axios","post","query","variables","creatorName","headers","Accept","then","ModalLayer","onClick","className","onMouseUpOffModal","ModalContent","ModalHeader","CloseBtn","Circle","ModalSection","type","placeholder","onChange","required","ModalFooter","CreateRoomBtn","styled","div","button","header","section","footer","Frame","Card","ButtonWrapper","AddDebateRoomButton","Home","props","modalIsOpen","offset","setOffset","history","useHistory","console","log","response","homeDebates","fetchMoreData","checkScroll","scrollHeight","mainScrollSection","scrollTop","clientHeight","document","querySelector","useEffect","addEventListener","removeEventListener","map","debaterRoom","index","id","push","pathname","state","debaterId","SingleReply","reply","writerName","content","BrowerCheck","sUsrAg","navigator","userAgent","indexOf","Debate_Subject","debate","roomId","Debate_title","Debate_Room","React","Component","id_data","useLocation","loadComment","comments","addComment","debateId","addReply","getElementById","replys","window","location","reload","App","exact","to","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ad599ed5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport axios from \"axios\";\n\nconst ModalCreateRoom = ({ isOpen, onCloseEvent, getData, setModalIsOpen }) => {\n  const [data, setData] = useState({ title: \"\", description: \"\" });\n  const { title, description } = data;\n  function handleValue(e) {\n    const { name, value } = e.target;\n    setData({\n      ...data,\n      [name]: value,\n    });\n  }\n  const onClickCreateRoom = async (title, description) => {\n    await axios\n      .post(\n        \"/graphql\",\n        {\n          query: `mutation createDebate($title:String!, $description:String!, $creatorName:String!) {\n          createDebate(title:$title, description:$description, creatorName:$creatorName)\n        }`,\n          variables: {\n            title: title,\n            description: description,\n            creatorName: \"아이디라우\",\n          },\n        },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Api-Key\": \"demoKeyOfApi\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then(() => setModalIsOpen(false))\n      .then(() => getData());\n  };\n\n  function onMouseUpOffModal(e) {\n    if (e.target.className === \"css-1gkwgdl\") {\n      setModalIsOpen(false);\n    } else {\n      return;\n    }\n  }\n  return (\n    <>\n      {isOpen ? (\n        <ModalLayer onClick={(e) => onMouseUpOffModal(e)}>\n          <ModalContent>\n            <ModalHeader>\n              <CloseBtn onClick={onCloseEvent}>\n                <Circle />\n              </CloseBtn>\n            </ModalHeader>\n            <ModalSection>\n              제목 :\n              <input\n                type='text'\n                name='title'\n                placeholder='제목'\n                value={title}\n                onChange={handleValue}\n                required\n              />\n              설명 :\n              <input\n                type='text'\n                name='description'\n                placeholder='설명'\n                value={description}\n                onChange={handleValue}\n                required\n              />\n            </ModalSection>\n            <ModalFooter>\n              <CreateRoomBtn\n                onClick={() => onClickCreateRoom(data.title, data.description)}\n              >\n                방 만들기\n              </CreateRoomBtn>\n            </ModalFooter>\n          </ModalContent>\n        </ModalLayer>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default ModalCreateRoom;\n\nconst ModalLayer = styled.div`\n  display: none; // hidden by default\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  overflow: auto;\n`;\n\nconst ModalContent = styled.div`\n  display: grid;\n  grid-template-rows: 50px 3fr 1fr;\n  background-color: white;\n  width: 50%;\n  border: 1px solid gray;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n`;\n\nconst CloseBtn = styled.button`\n  /* background-color: #3281f6; */\n  background-color: black;\n  height: 100%;\n  border: none;\n`;\n\nconst ModalHeader = styled.header`\n  background-color: black;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ModalSection = styled.section`\n  background-color: wheat;\n`;\n\nconst ModalFooter = styled.footer`\n  background-color: red;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Circle = styled.div`\n  width: 50%;\n  height: 50%;\n  border-radius: 100%;\n  background-color: red;\n  text-align: center;\n`;\n\nconst CreateRoomBtn = styled.button`\n  width: 100px;\n  height: 90%;\n  background-color: #3281f6;\n  border: none;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport ModalCreateRoom from \"./Home/ModalCreateRoom\";\n\nconst Home = ({ props }) => {\n  const [data, setData] = useState(\"\");\n  const [moreData, setMoreData] = useState(\"\");\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [offset, setOffset] = useState(1);\n  let history = useHistory();\n  console.log(offset);\n  const getData = async () => {\n    const { data: response } = await axios.post(\n      \"/graphql\",\n      {\n        query: `query gethomeDebates {\n      homeDebates(offset:1, size:5){id title creatorName}\n    }`,\n      },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Api-Key\": \"demoKeyOfApi\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    setData(response.data.homeDebates);\n    console.log(data);\n  };\n\n  const fetchMoreData = async (offset) => {\n    await axios.post(\n      \"/graphql\",\n      {\n        query: `query gethomeDebates {\n  homeDebates(offset:${offset}, size:5){id title creatorName}\n  }`,\n      },\n      {\n        headers: {\n          Accept: \"application/json\",\n          \"Api-Key\": \"demoKeyOfApi\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n  };\n\n  function checkScroll() {\n    // console.log(\"check Scroll start!\");\n    const scrollHeight = mainScrollSection.scrollHeight;\n    const scrollTop = mainScrollSection.scrollTop;\n    const clientHeight = mainScrollSection.clientHeight;\n    if (scrollTop + clientHeight >= scrollHeight) {\n      console.log(\"밑 바닥에 파닭\");\n      setOffset(offset + 1);\n    }\n  }\n\n  const mainScrollSection = document.querySelector(\".main\");\n  useEffect(() => {\n    getData();\n  }, []);\n  useEffect(() => {\n    mainScrollSection &&\n      mainScrollSection.addEventListener(\"scroll\", checkScroll);\n    fetchMoreData(offset);\n\n    return () => {\n      mainScrollSection &&\n        mainScrollSection.removeEventListener(\"scroll\", checkScroll);\n    };\n  });\n\n  const onClickList = (id) => {\n    history.push({ pathname: \"/routing\", state: { debaterId: id } });\n  };\n  const onClickModal = () => {\n    setModalIsOpen(true);\n  };\n\n  const onCloseModal = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <Frame>\n      <ButtonWrapper>\n        <AddDebateRoomButton onClick={onClickModal}>\n          방만들기\n        </AddDebateRoomButton>\n      </ButtonWrapper>\n      {data &&\n        data.map((debaterRoom, index) => (\n          <Card\n            key={debaterRoom.id}\n            onClick={() => onClickList(debaterRoom.id)}\n          >\n            <h3>{debaterRoom.title}</h3>\n            <p>{debaterRoom.creatorName}</p>\n          </Card>\n        ))}\n      <ModalCreateRoom\n        isOpen={modalIsOpen}\n        onCloseEvent={onCloseModal}\n        getData={getData}\n        setModalIsOpen={setModalIsOpen}\n      />\n    </Frame>\n  );\n};\n\nconst Frame = styled.div`\n  width: 80vw;\n`;\n\nconst Card = styled.div`\n  height: 100px;\n  min-width: 300px;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n  margin: 20px 0px 15px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  cursor: pointer;\n`;\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 50px;\n  margin: 5px;\n`;\nconst AddDebateRoomButton = styled.button``;\nexport default Home;\n","import React from 'react';\nimport './Debate_Room.css'\n\nexport default function SingleReply ({reply}){\n    return(\n        <div className='reply' className='container'>\n            <div className='writer'>{reply.writerName}</div>\n            <div className='content'>{reply.content}</div>\n        </div>\n    )\n}\n","function BrowerCheck(props) {\n    var sBrowser, sUsrAg = navigator.userAgent;\n\n    // The order matters here, and this may report false positives for unlisted browsers.\n\n    if (sUsrAg.indexOf(\"Firefox\") > -1) {\n        sBrowser = \"Mozilla Firefox\";\n        // \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0\"\n    } else if (sUsrAg.indexOf(\"SamsungBrowser\") > -1) {\n        sBrowser = \"Samsung Internet\";\n        // \"Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G955F Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/9.4 Chrome/67.0.3396.87 Mobile Safari/537.36\n    } else if (sUsrAg.indexOf(\"Opera\") > -1 || sUsrAg.indexOf(\"OPR\") > -1) {\n        sBrowser = \"Opera\";\n        // \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 OPR/57.0.3098.106\"\n    } else if (sUsrAg.indexOf(\"Trident\") > -1) {\n        sBrowser = \"Microsoft Internet Explorer\";\n        // \"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Zoom 3.6.0; wbx 1.0.0; rv:11.0) like Gecko\"\n    } else if (sUsrAg.indexOf(\"Edge\") > -1) {\n        sBrowser = \"Microsoft Edge\";\n        // \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299\"\n    } else if (sUsrAg.indexOf(\"Chrome\") > -1) {\n        sBrowser = \"Google Chrome or Chromium\";\n        // \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/66.0.3359.181 Chrome/66.0.3359.181 Safari/537.36\"\n    } else if (sUsrAg.indexOf(\"Safari\") > -1) {\n        sBrowser = \"Apple Safari\";\n        // \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.0 Mobile/15E148 Safari/604.1 980x1306\"\n    } else {\n        sBrowser = \"unknown\";\n    }\n\n    return (\n        sBrowser\n    );\n}\n\nexport default BrowerCheck;","import React, {Fragment, useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst Debate_Subject = ( props )=>{\n    const [data, setData] = useState(null);\n           \n    useEffect( () => {\n        const getData = async (id) =>{\n            const {\n                data: {data}\n            } = await axios.post(\"/graphql\",\n                        {\n                            query: `\n                                query ($id:String!){\n                                    debate(id:$id){\n                                        description\n                                        creatorName\n                                    }\n                            }`,\n                            variables: { \n                                id : id\n                            }\n                        },\n                        {\n                            headers: {\n                            \"Accept\": \"application/json\",\n                            \"Api-Key\": \"demoKeyOfApi\",\n                            \"Content-Type\": \"application/json\"\n                            }\n                        }\n            );\n            setData(data.debate);\n            console.log(data.debate);\n        }\n\n        getData(props.roomId);\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                {data && \n                    <div>\n                        creator : {data.creatorName} <br/>\n                        subject : {data.description}\n                    </div>\n                }\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Debate_Subject;","import React, {Fragment, useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst Debate_title = ( props )=>{\n    const [data, setData] = useState(null);\n\n    \n    useEffect( () => {\n        const getData = async (id) =>{\n            const {\n                data: {data}\n            } = await axios.post(\"/graphql\",\n                        {\n                            // id 부분 변수로 변경 필요 $id! 쓰면 되는걸로 알고있음\n                            query: `\n                                query ($id:String!){\n                                        debate(id:$id){\n                                            title\n                                        }\n                                }`,\n                                variables: { \n                                    id : id\n                                }\n                        },\n                        {\n                            headers: {\n                            \"Accept\": \"application/json\",\n                            \"Api-Key\": \"demoKeyOfApi\",\n                            \"Content-Type\": \"application/json\"\n                            }\n                        }\n            );\n            setData(data.debate);\n        }\n\n        getData(props.roomId);\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                {data && \n                    <div>\n                        <h1>{data.title}</h1>\n                    </div>\n                }\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Debate_title;","import React, { useState, useEffect } from 'react';\nimport SingleReply from './SingleReply';\nimport BrowserCheck from './BrowserCheck';\nimport Debate_Subject from './Debate_Subject';\nimport Debate_title from './Debate_title';\nimport axios from \"axios\";\nimport BrowerCheck from './BrowserCheck';\nimport { useLocation  } from \"react-router-dom\";\nimport { getDefaultNormalizer } from '@testing-library/dom';\n\nconst Debate_Room = () => {\n    const [data, setData] = useState(\"\");\n    const location = useLocation();\n    const id_data = location.state.debaterId;\n    // console.log(id_data);\n\n    const remove_text = () => {\n        var clear_area = document.getElementById('new-reply-content');\n        clear_area.value = ' ';\n    }\n\n    useEffect(() => {\n        loadComment(id_data);\n    }, []);\n\n    const loadComment = async(id) => {\n        const { data: response } = await axios.post(\"/graphql\",\n                    {\n                        query: ` \n                            query ($id:String!){\n                                debate(id:$id){\n                                    comments{\n                                        content\n                                        writerName\n                                    }\n                            }\n                        }`,\n                        variables: { \n                            id : id\n                        }\n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        );\n    setData(response.data.debate.comments);\n    }\n\n    const addComment = async(id, content, writerName) => {\n        await axios.post(\"/graphql\",\n                    {\n                        query: \n                            `mutation addComment($debateId:String!, $content:String!, $writerName:String!){\n                                addComment(\n                                    debateId:$debateId,\n                                    comment:{\n                                        content:$content,\n                                        writerName:$writerName\n                                    }\n                                )\n                            }`,\n                        \n                            variables: {\n                                debateId : id,\n                                content : content,\n                                writerName : writerName\n                            } \n                                    \n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        )\n    }\n\n   const addReply = () => {\n        let value = document.querySelector('#new-reply-content').value;\n        addComment(id_data, value, BrowerCheck());\n        remove_text();\n        \n    }\n\n    return (\n        <div id=\"Debate_Room\">\n            <div>\n                <Debate_title roomId={id_data} />\n                <Debate_Subject roomId={id_data} />\n                <div id=\"replys\">\n                    {\n                        data && data.map((replys)=> {\n                            return( \n                                <div className='reply' className='container'>\n                                    <h5>{replys.writerName}</h5>\n                                    <p>{replys.content}</p>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                <div id=\"writing-area\">\n                    <textarea id=\"new-reply-content\"></textarea>\n                    <button id=\"submit-new-reply\" onClick={function(e){\n                        addReply();\n                        window.location.reload();\n                    }}>입력</button>\n                </div>\n            </div>\n        </div>\n    )\n    \n\n    \n    \n}\n\nexport default Debate_Room;","import React from 'react';\nimport SingleReply from './SingleReply';\nimport BrowserCheck from './BrowserCheck';\nimport Debate_Subject from './Debate_Subject';\nimport Debate_title from './Debate_title';\nimport axios from \"axios\";\nimport BrowerCheck from './BrowserCheck';\n\nclass Debate_Room extends React.Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            replys : [],\n            content:'',\n            writerName:''\n        }\n        \n        this.addReply = this.addReply.bind(this);\n    }\n    \n    loadComment = async() => {\n        axios.post(\"/graphql\",\n                       {\n                           query: `{debate(id:\"id\"){comments{content writerName}}}`\n                       },\n                       {\n                           headers: {\n                           \"Accept\": \"application/json\",\n                           \"Api-Key\": \"demoKeyOfApi\",\n                           \"Content-Type\": \"application/json\"\n                           }\n                       }\n       ).then(({ data }) => {\n           this.setState({\n               replys: data.data.debate.comments\n           })\n       });\n   };\n\n   componentDidMount(){\n       this.loadComment();\n   }\n\n   addComment = async() => {\n        axios.post(\"/graphql\",\n                    {\n                        query: \n                            `mutation addComment($debateId:String!, $content:String!, $writerName:String!){\n                                addComment(\n                                    debateId:$debateId,\n                                    comment:{\n                                        content:$content,\n                                        writerName:$writerName\n                                    }\n                                )\n                            }`,\n                        \n                            variables: {\n                                debateId : \"id\",\n                                content : this.state.content,\n                                writerName : this.state.writerName\n                            } \n                                    \n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        )\n   }\n\n    addReply(){\n        let value = document.querySelector('#new-reply-content').value;\n        this.setState({replys: [...this.state.replys, {\n            // id : this.state.replys.length + 1, 추후 ID값 추가되면 넣을자리\n            writerName : BrowerCheck(),\n            content : value\n        }],\n        content : value,\n        writerName : BrowerCheck()\n        }, () => { this.addComment(); console.log(this.state.writerName, this.state.content); })\n        this.remove_text();\n    }\n\n    render(){\n        const { replys } = this.state;\n        console.log(replys);\n\n        return (\n            <div id=\"root\">\n                <div>\n                    <Debate_title />\n                    <Debate_Subject />\n                    <div id=\"replys\">\n                        {\n                            this.state.replys.map(replys => {\n                                return <SingleReply key={replys.id} reply={replys}/>\n                            })\n                        }\n                    </div>\n                    <div id=\"writing-area\">\n                        <textarea id=\"new-reply-content\"></textarea>\n                        <button id=\"submit-new-reply\" onClick={this.addReply}>입력</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    remove_text(){\n        var clear_area = document.getElementById('new-reply-content');\n        clear_area.value = ' ';\n    }\n    \n}\n\nexport default Debate_Room;","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport \"./App.css\";\nimport \"./Debate_Room/Debate_Room\";\nimport Debate_Room from \"./Debate_Room/Debate_Room_func\";\n\nfunction App() {\n  return (\n    <Router>\n      <header className='header'>\n        <div>\n          <Link exact='true' to='/DebateOnWeb'>\n            Debaters world\n          </Link>\n        </div>\n      </header>\n      <div className='main'>\n        <Switch>\n          <Route exact path='/DebateOnWeb'>\n            <Home />\n          </Route>\n          <Route exact path='/routing'>\n            <Debate_Room />\n          </Route>\n        </Switch>\n      </div>\n      <footer className='footer'></footer>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}