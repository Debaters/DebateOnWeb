{"version":3,"sources":["Debate_Room/SingleReply.js","Debate_Room/BrowserCheck.js","Debate_Room/Debate_Subject.js","Debate_Room/Debate_title.js","Debate_Room/Debate_Room_func.js","Debate_Room/Debate_Room.js","components/Home/HomeTest.tsx","App.tsx","index.tsx"],"names":["SingleReply","reply","className","writerName","content","BrowserCheck","props","sUsrAg","navigator","userAgent","indexOf","Debate_Subject","useState","data","setData","useEffect","id","a","axios","post","query","variables","headers","debate","getData","roomId","creatorName","description","Debate_title","title","Debate_Room","React","Component","setReply","NickName","setNick","id_data","useLocation","state","debaterId","loadComment","getNickName","response","getComments","addComment","debateId","addReply","value","document","querySelector","getNickname","getElementById","length","map","replys","onClick","e","Frame","styled","div","Card","ObserveDiv","HomeTest","offset","setOffset","isLoading","setIsLoading","observerRef","useRef","fetch","body","Accept","method","console","log","json","result","homeDebates","prev","observer","IntersectionObserver","entries","isIntersecting","observeTarget","current","observe","createObserver","history","useHistory","debaterRoom","push","pathname","ref","App","to","exact","path","authLink","setContext","_","process","httplink","createHttpLink","uri","cache","InMemoryCache","typePolicies","Query","fields","offsetLimitPagination","ApolloClient","link","concat","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb06bf0f.chunk.js","sourcesContent":["import React from 'react';\nimport './Debate_Room.css'\n\nexport default function SingleReply ({reply}){\n    return(\n        <div className='reply' className='container'>\n            <div className='writer'>{reply.writerName}</div>\n            <div className='content'>{reply.content}</div>\n        </div>\n    )\n}\n","// 닉네임 대용으로 사용중이던 브라우저 명 체크. 닉네임이 정상 작동할 경우 해당 소스는 제거 예정\nfunction BrowserCheck(props) {\n    var sBrowser, sUsrAg = navigator.userAgent;\n\n    // The order matters here, and this may report false positives for unlisted browsers.\n\n    if (sUsrAg.indexOf(\"Firefox\") > -1) {\n        sBrowser = \"Mozilla Firefox\";\n        // \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0\"\n    } else if (sUsrAg.indexOf(\"SamsungBrowser\") > -1) {\n        sBrowser = \"Samsung Internet\";\n        // \"Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G955F Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/9.4 Chrome/67.0.3396.87 Mobile Safari/537.36\n    } else if (sUsrAg.indexOf(\"Opera\") > -1 || sUsrAg.indexOf(\"OPR\") > -1) {\n        sBrowser = \"Opera\";\n        // \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 OPR/57.0.3098.106\"\n    } else if (sUsrAg.indexOf(\"Trident\") > -1) {\n        sBrowser = \"Microsoft Internet Explorer\";\n        // \"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Zoom 3.6.0; wbx 1.0.0; rv:11.0) like Gecko\"\n    } else if (sUsrAg.indexOf(\"Edge\") > -1) {\n        sBrowser = \"Microsoft Edge\";\n        // \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299\"\n    } else if (sUsrAg.indexOf(\"Chrome\") > -1) {\n        sBrowser = \"Google Chrome or Chromium\";\n        // \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/66.0.3359.181 Chrome/66.0.3359.181 Safari/537.36\"\n    } else if (sUsrAg.indexOf(\"Safari\") > -1) {\n        sBrowser = \"Apple Safari\";\n        // \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.0 Mobile/15E148 Safari/604.1 980x1306\"\n    } else {\n        sBrowser = \"unknown\";\n    }\n\n    return (\n        sBrowser\n    );\n}\n\nexport default BrowserCheck;","import React, {Fragment, useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst Debate_Subject = ( props )=>{\n    const [data, setData] = useState(null);\n           \n    useEffect( () => {\n        const getData = async (id) =>{\n            const {\n                data: {data}\n            } = await axios.post(\"/graphql\",\n                        {\n                            query: `\n                                query ($id:String!){\n                                    debate(id:$id){\n                                        description\n                                        creatorName\n                                    }\n                            }`,\n                            variables: { \n                                id : id\n                            }\n                        },\n                        {\n                            headers: {\n                            \"Accept\": \"application/json\",\n                            \"Api-Key\": \"demoKeyOfApi\",\n                            \"Content-Type\": \"application/json\"\n                            }\n                        }\n            );\n            setData(data.debate);\n        }\n\n        getData(props.roomId);\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                {data && \n                    <div>\n                        creator : {data.creatorName} <br/>\n                        subject : {data.description}\n                    </div>\n                }\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Debate_Subject;","import React, {Fragment, useEffect, useState} from 'react';\nimport axios from 'axios';\n\nconst Debate_title = ( props )=>{\n    const [data, setData] = useState(null);\n\n    \n    useEffect( () => {\n        const getData = async (id) =>{\n            const {\n                data: {data}\n            } = await axios.post(\"/graphql\",\n                        {\n                            // id 부분 변수로 변경 필요 $id! 쓰면 되는걸로 알고있음\n                            query: `\n                                query ($id:String!){\n                                        debate(id:$id){\n                                            title\n                                        }\n                                }`,\n                                variables: { \n                                    id : id\n                                }\n                        },\n                        {\n                            headers: {\n                            \"Accept\": \"application/json\",\n                            \"Api-Key\": \"demoKeyOfApi\",\n                            \"Content-Type\": \"application/json\"\n                            }\n                        }\n            );\n            setData(data.debate);\n        }\n\n        getData(props.roomId);\n    }, []);\n\n    return (\n        <Fragment>\n            <div>\n                {data && \n                    <div>\n                        <h1>{data.title}</h1>\n                    </div>\n                }\n            </div>\n        </Fragment>\n    );\n}\n\nexport default Debate_title;","import React, { useState, useEffect } from 'react';\nimport SingleReply from './SingleReply';\nimport BrowserCheck from './BrowserCheck';\nimport Debate_Subject from './Debate_Subject';\nimport Debate_title from './Debate_title';\nimport axios from \"axios\";\nimport { useLocation  } from \"react-router-dom\";\nimport { getDefaultNormalizer } from '@testing-library/dom';\n\nconst Debate_Room = () => {\n    const [reply, setReply] = useState([]);\n    const [NickName, setNick] = useState(\"\");\n    const location = useLocation();\n    const id_data = location.state.debaterId;\n\n    const remove_text = () => {\n        var clear_area = document.getElementById('new-reply-content');\n        clear_area.value = ' ';\n    }\n\n    useEffect(() => {\n        loadComment(id_data);\n        getNickName();\n    }, []);\n\n    const loadComment = async(id) => {\n        const { data: response } = await axios.post(\"/graphql\",\n                    {\n                        query: ` \n                            query ($id:String!){\n                                getComments(debateId:$id, offset:0, size:20){\n                                    content\n                                    writerName\n                                    debateId\n                            }\n                        }`,\n                        variables: { \n                            id : id\n                        }\n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        );\n        if(response.data.getComments.content != null || response.data.getComments.content != \"undefined\" || response.data.getComments.content != \"\"){\n            setReply(response.data.getComments);\n        }\n    }\n\n    const addComment = async(id, content, writerName) => {\n        await axios.post(\"/graphql\",\n                    {\n                        query: \n                            `mutation addComment($debateId:String!, $content:String!, $writerName:String!){\n                                addComment(\n                                    debateId:$debateId,\n                                    comment:{\n                                        debateId:$debateId,\n                                        content:$content,\n                                        writerName:$writerName\n                                    }\n                                )\n                            }`,\n                        \n                            variables: {\n                                debateId : id,\n                                content : content,\n                                writerName : writerName\n                            } \n                                    \n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        )\n    }\n\n   const getNickName = async() => {\n        const { data: response } = await axios.post(\"/graphql\",\n            {\n                query: \n                    `\n                    query{\n                        getNickname\n                    }\n                    `,\n            },\n            {\n                headers: {\n                \"Accept\": \"application/json\",\n                \"Api-Key\": \"demoKeyOfApi\",\n                \"Content-Type\": \"application/json\"\n                }\n            }\n        )\n        setNick(response.data);\n   }\n\n   const addReply = () => {\n        let value = document.querySelector('#new-reply-content').value;\n        setReply([...reply, {\n            writerName : NickName.getNickname,\n            content : value\n        }]);\n        addComment(id_data, value, NickName.getNickname);\n        remove_text();\n    }\n\n    return (\n        <div id=\"Debate_Room\">\n            <div>\n                <div id=\"titleBox\">\n                    <Debate_title roomId={id_data} />\n                    <Debate_Subject roomId={id_data} />\n                </div>\n                <div id=\"replys\">\n                    {\n                        reply.length > 0?\n                        reply.map((replys)=> { \n                            return <SingleReply reply={replys}/>\n                        })\n                        :<h1 id=\"noneReply\">등록된 글이 없습니다.</h1>\n                    }    \n                </div>\n                <div id=\"writing-area\">\n                    <textarea id=\"new-reply-content\"></textarea>\n                    <button id=\"submit-new-reply\" onClick={function(e){\n                        addReply();\n                    }}>입력</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Debate_Room;","import React from 'react';\nimport SingleReply from './SingleReply';\nimport BrowserCheck from './BrowserCheck';\nimport Debate_Subject from './Debate_Subject';\nimport Debate_title from './Debate_title';\nimport axios from \"axios\";\nimport BrowerCheck from './BrowserCheck';\n\nclass Debate_Room extends React.Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            replys : [],\n            content:'',\n            writerName:''\n        }\n        \n        this.addReply = this.addReply.bind(this);\n    }\n    \n    loadComment = async() => {\n        axios.post(\"/graphql\",\n                       {\n                           query: `{debate(id:\"id\"){comments{content writerName}}}`\n                       },\n                       {\n                           headers: {\n                           \"Accept\": \"application/json\",\n                           \"Api-Key\": \"demoKeyOfApi\",\n                           \"Content-Type\": \"application/json\"\n                           }\n                       }\n       ).then(({ data }) => {\n           this.setState({\n               replys: data.data.debate.comments\n           })\n       });\n   };\n\n   componentDidMount(){\n       this.loadComment();\n   }\n\n   addComment = async() => {\n        axios.post(\"/graphql\",\n                    {\n                        query: \n                            `mutation addComment($debateId:String!, $content:String!, $writerName:String!){\n                                addComment(\n                                    debateId:$debateId,\n                                    comment:{\n                                        content:$content,\n                                        writerName:$writerName\n                                    }\n                                )\n                            }`,\n                        \n                            variables: {\n                                debateId : \"id\",\n                                content : this.state.content,\n                                writerName : this.state.writerName\n                            } \n                                    \n                    },\n                    {\n                        headers: {\n                        \"Accept\": \"application/json\",\n                        \"Api-Key\": \"demoKeyOfApi\",\n                        \"Content-Type\": \"application/json\"\n                        }\n                    }\n        )\n   }\n\n    addReply(){\n        let value = document.querySelector('#new-reply-content').value;\n        this.setState({replys: [...this.state.replys, {\n            // id : this.state.replys.length + 1, 추후 ID값 추가되면 넣을자리\n            writerName : BrowerCheck(),\n            content : value\n        }],\n        content : value,\n        writerName : BrowerCheck()\n        }, () => { this.addComment(); console.log(this.state.writerName, this.state.content); })\n        this.remove_text();\n    }\n\n    render(){\n        const { replys } = this.state;\n        console.log(replys);\n\n        return (\n            <div id=\"root\">\n                <div>\n                    <Debate_title />\n                    <Debate_Subject />\n                    <div id=\"replys\">\n                        {\n                            this.state.replys.map(replys => {\n                                return <SingleReply key={replys.id} reply={replys}/>\n                            })\n                        }\n                    </div>\n                    <div id=\"writing-area\">\n                        <textarea id=\"new-reply-content\"></textarea>\n                        <button id=\"submit-new-reply\" onClick={this.addReply}>입력</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    remove_text(){\n        var clear_area = document.getElementById('new-reply-content');\n        clear_area.value = ' ';\n    }\n    \n}\n\nexport default Debate_Room;","import { gql, useQuery } from \"@apollo/client\";\nimport styled from \"@emotion/styled\";\nimport { debaterRoom } from \"../../types/home\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { responsePathAsArray } from \"graphql\";\n\n// const HOME_QUERY = gql`\n//   query gethomeDebates($offset: Int!, $size: Int!) {\n//     homeDebates(offset: $offset, size: $size) {\n//       id\n//       title\n//       creatorName\n//     }\n//   }\n// `;\nfunction HomeTest() {\n  const [offset, setOffset] = useState<number>(0);\n  const [data, setData] = useState<debaterRoom[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const observerRef: MutableRefObject<HTMLDivElement | null> =\n    useRef<HTMLDivElement>(null);\n\n  // const { data } = useQuery(HOME_QUERY, {\n  //   variables: {\n  //     offset: offset,\n  //     size: 7,\n  //   },\n  // });\n\n  const getData = async () => {\n    const response = await fetch(\"/graphql\", {\n      body: `{\"query\":\"{homeDebates(offset:${offset},size:6){id title creatorName}}\"}`,\n      headers: {\n        Accept: \"application/json\",\n        \"Api-Key\": \"demoKeyOfApi\",\n        \"Content-Type\": \"application/json\",\n      },\n      method: \"POST\",\n    });\n    console.log(\"1, is it workin?\");\n    const result = await response.json();\n    const a: debaterRoom[] = result.data.homeDebates;\n    setData((prev: debaterRoom[]) => [...prev, ...a]);\n    console.log(\"2, set true\");\n    setIsLoading(true);\n  };\n\n  function createObserver() {\n    if (isLoading) {\n      console.log(\"offset not changed but workin?\");\n      const observer: IntersectionObserver = new IntersectionObserver(\n        (entries) => {\n          if (data.length === 0) return;\n          if (!entries[0].isIntersecting) return;\n          console.log(\"3, 교차\");\n          setOffset((prev) => prev + 1);\n        }\n      );\n      const observeTarget = observerRef.current as Element;\n      observer.observe(observeTarget);\n      console.log(data);\n    }\n  }\n  useEffect(() => {\n    getData();\n  }, [offset]);\n\n  useEffect(() => {\n    createObserver();\n  }, [isLoading]);\n\n  const history = useHistory();\n  const onClickList = (id: string) => {\n    history.push({ pathname: \"/routing\", state: { debaterId: id } });\n  };\n\n  return (\n    <Frame>\n      {data &&\n        data.map((debaterRoom: debaterRoom) => (\n          <Card\n            key={debaterRoom.id}\n            onClick={() => onClickList(debaterRoom.id)}\n          >\n            <h3>{debaterRoom.title}</h3>\n            <p>{debaterRoom.creatorName}</p>\n          </Card>\n        ))}\n      <ObserveDiv ref={observerRef}></ObserveDiv>\n      {/* <button onClick={() => createObserver()}>1</button> */}\n      <button onClick={() => console.log(data)}>2</button>\n    </Frame>\n  );\n}\n\nconst Frame = styled.div`\n  width: 80vw;\n`;\n\nconst Card = styled.div`\n  height: 120px;\n  min-width: 300px;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n    rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n    rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n  margin: 20px 0px 15px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  cursor: pointer;\n`;\n\nconst ObserveDiv = styled.div`\n  visibility: hidden;\n  height: 30px;\n`;\n\nexport default HomeTest;\n","import * as React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n// import Home from \"./components/Home/Home\";\nimport \"./App.css\";\nimport \"./Debate_Room/Debate_Room\";\nimport Debate_Room from \"./Debate_Room/Debate_Room_func\";\nimport HomeTest from \"./components/Home/HomeTest\";\nimport Home from \"./components/Home/Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <header className='header'>\n        <div>\n          <Link to='/DebateOnWeb'>Debaters world</Link>\n        </div>\n      </header>\n      <div className='main'>\n        <Switch>\n          <Route exact path='/DebateOnWeb'>\n            {/* <Home /> */}\n            <HomeTest />\n          </Route>\n          <Route exact path='/routing'>\n            <Debate_Room />\n          </Route>\n        </Switch>\n      </div>\n      <footer className='footer'></footer>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport App from \"./App\";\nimport { offsetLimitPagination } from \"@apollo/client/utilities\";\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      Accept: \"application/json\",\n      \"Api-Key\": process.env.REACT_APP_API_KEY,\n      \"Content-Type\": \"application/json\",\n    },\n  };\n});\n\nconst httplink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// 캐시에서 서로 다른 리스트로 보기 떼문에 데이터가 지워짐, 필드 policy를 수정해서 캐시 행동을 고쳐줄것임\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        homeDebates: offsetLimitPagination(),\n      },\n    },\n  },\n});\nconst client = new ApolloClient({\n  uri: \"http://debaters.world:9090\",\n  cache: cache,\n  link: authLink.concat(httplink),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <ApolloProvider client={client}> */}\n    <App />\n    {/* </ApolloProvider> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}